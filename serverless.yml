service: bci4als
app: bci4als
org: tonythree
frameworkVersion: "2"

plugins:
  - serverless-offline
  - serverless-python-requirements
provider:
  name: aws
  runtime: python3.8
  lambdaHashingVersion: 20201221
  region: eu-west-1
  stage: ${opt:stage, "staging"}
  environment:
    eventsTable: ${self:custom.eventsTableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["eventsTable", "Arn"] }
        - Fn::Join:
            - "/"
            - - { "Fn::GetAtt": ["eventsTable", "Arn"] }
              - "index/*"

functions:
  create_event:
    handler: lambdas/create_event.handler
    events:
      - http:
          path: /events
          method: post

  get_event:
    handler: lambdas/get_event.handler
    events:
      - http:
          path: /events/{id}
          method: get

  get_events_list:
    handler: lambdas/get_events_list.handler
    events:
      - http:
          path: /events
          method: get

custom:
  eventsTableName: ${self:service}-${self:provider.stage}
resources:
  Resources:
    eventsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:custom.eventsTableName}
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
